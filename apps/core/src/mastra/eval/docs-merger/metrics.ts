export interface EvalSample {
  golden: string;        // The expected / golden description
  predicted: string;     // The description generated by the agent
}
/**
 * Metrics for evaluating the performance of a documentation merging agent.
 * It includes total samples, exact matches, non-empty matches,
 * accuracy, precision, recall, F1 score, and empty predictions.
 */
export interface EvalMetrics {
  totalSamples: number;
  exactMatches: number;
  nonEmptyMatches: number; // predicted matches ignoring empty preds
  accuracy: number;        // exact matches / total
  precision: number;       // TP / (TP + FP) (simplified)
  recall: number;          // TP / (TP + FN) (simplified)
  f1Score: number;         // harmonic mean of precision and recall
  emptyPredictions: number;
}

function normalize(text: string): string {
  return text.trim().toLowerCase();
}

/**
 * Evaluate the predictions against the golden reference descriptions.
 * Treat empty strings in predicted as missing prediction.
 * Calculates accuracy, precision, recall, F1 score.
 */
export function evaluate(samples: EvalSample[]): EvalMetrics {
  let total = samples.length;
  let exactMatches = 0;
  let nonEmptyMatches = 0;
  let emptyPredictions = 0;

  // For precision/recall, count true positives (TP), false positives (FP), false negatives (FN)
  // Here we simplify: TP = exact matches with non-empty predicted
  // FP = predicted non-empty but does not match golden
  // FN = golden non-empty but predicted empty or no match
  let TP = 0;
  let FP = 0;
  let FN = 0;

  samples.forEach(({ golden, predicted }) => {
    const g = normalize(golden);
    const p = normalize(predicted);

    const isGoldenEmpty = g === '';
    const isPredictedEmpty = p === '';

    if (isPredictedEmpty) emptyPredictions++;

    if (p === g && !isPredictedEmpty) {
      exactMatches++;
      TP++;
      nonEmptyMatches++;
    } else {
      if (!isPredictedEmpty) {
        // predicted something but no match
        FP++;
      }
      if (!isGoldenEmpty && (isPredictedEmpty || p !== g)) {
        FN++;
      }
    }
  });

  const accuracy = total > 0 ? exactMatches / total : 0;
  const precision = TP + FP > 0 ? TP / (TP + FP) : 0;
  const recall = TP + FN > 0 ? TP / (TP + FN) : 0;
  const f1Score = precision + recall > 0 ? (2 * precision * recall) / (precision + recall) : 0;

  return {
    totalSamples: total,
    exactMatches,
    nonEmptyMatches,
    accuracy,
    precision,
    recall,
    f1Score,
    emptyPredictions,
  };
}

/**
 * Generate a human-readable summary of the evaluation metrics
 */
export function generateReport(metrics: EvalMetrics): string {
  return `
Evaluation Report:
--------------------
Total samples      : ${metrics.totalSamples}
Exact matches      : ${metrics.exactMatches}
Non-empty matches  : ${metrics.nonEmptyMatches}
Empty predictions  : ${metrics.emptyPredictions}

Accuracy           : ${(metrics.accuracy * 100).toFixed(2)}%
Precision          : ${(metrics.precision * 100).toFixed(2)}%
Recall             : ${(metrics.recall * 100).toFixed(2)}%
F1 Score           : ${(metrics.f1Score * 100).toFixed(2)}%
`.trim();
}